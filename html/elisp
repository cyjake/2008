<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <title>Elisp - leto.org</title>
    <meta name="generator" content="muse.el" />
    <meta http-equiv="Content-Type"
          content="text/html; charset=utf-8" />
    <link rel="stylesheet" type="text/css" media="screen" href="../css/wiki.css" />
  </head>
  <body>
    <ul class="nav">
	<li><a href="./">Home</a></li>
	<li><a href="./movie.html">Little IMDB</a></li>
	<li><a href="./tool.html">Smith</a></li>
	<li><a href="./fiction.html">Reading</a></li>
	<li><a href="./photo.html">Galleries</a></li>
	<li><a href="./about.html">About</a></li>
    </ul> <!-- navigator -->
    <div id="greet">
      <span class="email">leto@freecity.cn</span>
      <h1>Elisp</h1>
      <h2>Jake's Free House For Fun.</h2>
    </div> <!-- greet --> 
    <div id="wiki">
      <div id="cont">
      <!-- Page published by Emacs Muse begins here -->
      
写在前面

已经消逝已久的对 lisp 的热情似乎又回来了，因为前些天摸索着居然写出了个 imgtag 出来，
于是重新开始看 elisp-intro ，做了两个第三章末尾的作业。以后做的作业阿笔记阿什么的，都贴这里。


Strange Names


The name of the cons function is not unreasonable: it is an abbreviation of the
word `construct'. The origins of the names for car and cdr, on the other hand,
are esoteric: car is an acronym from the phrase `Contents of the Address part
of the Register'; and cdr (pronounced `could-er') is an acronym from the phrase
`Contents of the Decrement part of the Register'. These phrases refer to
specific pieces of hardware on the very early computer on which the original
Lisp was developed. Besides being obsolete, the phrases have been completely
irrelevant for more than 25 years to anyone thinking about Lisp. Nonetheless,
although a few brave scholars have begun to use more reasonable names for these
functions, the old terms are still in use. In particular, since the terms are
used in the Emacs Lisp source code, we will use them in this introduction.



Solution to Emacs Lisp Intro

Chapter 3 - Exercise 1
Write a non-interactive function that doubles the value of its argument,
a number. Make that function interactive.


(defun leto-double (parameter)
  "a little function to double numbers"
  (interactive "p")
  (let ((number parameter)
	)
    (message "%d's doubled value is %d" number (* number 2))))


Chapter 3 - Exercise 2
Write a function that tests whether the current value of fill-column is
greater than the argument passed to the function, and if so, prints an
appropriate message.


(defun leto-check-with-fill-column (parameter)
  "compare the given number with fill-column"
  (interactive "p")
  (let ((number parameter)
	)
    (if (< number fill-column)
	(message "compatible with current fill-column: %d" fill-column)
      (message "no kidding, that's far beyond what i can take."))))


Chapter 4 - Exercise 1
Write your own simplified-end-of-buffer function definition; then test
it to see whether it works.


(defun leto-simplified-end-of-buffer ()
  "go to the end of current buffer."
  (interactive)
  (push-mark (point))
  (goto-char (point-max)))


Chapter 4 - Exercise 2
Use if and get-buffer to write a function that prints a message telling
you whether a buffer exists.For using parameter only will be okay, the let form is not essential.


(defun leto-check-buffer (parameter)
  "check out whether the specified buffer exists or not."
  (interactive "BCheck it out: ")
  (let ((buf parameter))
    (if (get-buffer buf)
	(message "buffer %s exists!" buf)
      (message "opps! buffer %s hasn't been created yet. Create?" buf))
    ))


Chapter 5 - Exercise 1
Write an interactive function with an optional argument that tests whether
its argument, a number, is greater or less than the value of fill-column,
and tells you which, in a message. However, if you do not pass an argument
to the function, use 56 as a default value.


(defun leto-check-with-fill-column (&optional arg)
  "Compare the argument given with the value of fill-column.
Use 56 as a default value is the argument is omitted. "
  (interactive "P")
  (let ((num (or (if arg
		     ;; _if_ expression is essential, otherwise arg will
		     ;; default to 1 if not assigned.
		     (prefix-numeric-value arg))
		 56)
	     ))
	(if (< num fill-column)
	  (message "%d is compatible" num)
	(message "no kidding."))))


Chapter 6 - Exercise 1
Write a function that will display the first 60 characters of the current
buffer, even if you have narrowed the buffer to its latter half so that the
first line is inaccessible. Restore point, mark, and narrowing. For this
exercise, you need to use save-restriction, widen, goto-char, point-min,
buffer-substring, message, and other functions, a whole potpourri.n. 混合物, 杂曲, 混成曲, 杂集, 大杂烩


(defun leto-first-60 ()
  "Return the beginning 60 characters of current buffer not regarding
it is narrowed or not. "
  (interactive)
  (save-restriction
    (widen)
    (save-excursion
      (message "The first 60 characters of current buffer are: \n%s"
	       (buffer-substring (goto-char (point-min)) 60)
               ;; _buffer-substring_ will use current buffer as the buffer being
               ;; processed. _substring_ need providing the major string arg.
	       )
      )))


Chapter 7 - Exercise 1
Construct a list of four birds by evaluating several expressions with cons.
Find out what happens when you cons a list onto itself. Replace the first
element of the list of four birds with a fish. Replace the rest of that
list with a list of other fish.


(defun practise-fundamental ()
  "shows the use of fundamental functions such as _cons_, _setcar_, _setcadr_. "
  (interactive)
  (message "cons birds: %s. \ncons birds to itself: \n%s.
after setcar: %s, birds: %s. \nafter setcdr: %s, \nbirds(actually fish): %s. "
	   (setq birds
		 (cons 'crow
		       (cons 'magpie
			     (cons 'swallow
				   (cons 'lark ()))))
		 )
	   (cons birds birds)
	   (setcar birds 'shark) birds
	   (setcdr birds '(cyprinoid goldfish dorado)) birds))


Chapter 8 - Exercise 1
Write an interactive function that searches for a string. If the
search finds the string, leave point after it and display a message
that says "Found!". (Do not use search-forward for the name of this
function; if you do, you will overwrite the existing version of
search-forward that comes with Emacs. Use a name such as
test-search instead.)


(defun leto-search-forward (arg char)
  "search for a string and echo \"Found!\" if succeed."
  (interactive "*p\ncSpecify a char:")
  (when (search-forward
	 (char-to-string char) nil nil arg)
    (message "Found!")
    ))


Chapter 8 - Exercise 2
Write a function that prints the third element of the kill ring in
the echo area, if any; if the kill ring does not contain a third
element, print an appropriate message.


(defun leto-nth-kill-ring-element (arg)
  "get the nth element of the kill ring. And if not provided,
the value of n is default to 3."
  (interactive "p")
  ;; If the first element is nil, as it is here, information
  ;; about error signal is not stored by another function.
  (condition-case nil

      ;; Tells the lisp interpreter what to do when all goes well.
      (let ((depth (or arg 3))
	    )
	(when (< depth (length kill-ring))
	  (message "%s" (car (nthcdr depth kill-ring))))
	)

    ;; Tells the interpreter what to do with an error.
    (message "Don't go that far plz.")
    )
  )


Chapter 9 - Exercise 1
Set flowers to violet and buttercup. Cons two more flowers on to
this list and set this new list to more-flowers. Set the CAR of
flowers to a fish. What does the more-flowers list now contain?


;; Press C-x C-e at the end of each line orderly.
(setq flowers '(violet buttercup))
(setq more-flowers (cons 'lily (cons 'rose flowers)))
(setcar flowers 'fish)
more-flowers


Chapter 10 - Exercise 1
Using C-h v (describe-variable), look at the value of your kill
ring. Add several items to your kill ring; look at its value
again. Using M-y (yank-pop), move all the way around the kill
ring. How many items were in your kill ring? Find the value of
kill-ring-max. Was your kill ring full, or could you have kept
more blocks of text within it?


(defun leto-check-kill-ring-length ()
  "show the maximum length of kill-ring.
Display a message when kill-ring is full."
  (interactive)
  (message "capacity: %d. %s."
	   kill-ring-max
	   (if (< (length kill-ring) kill-ring-max)
	       "not full yet"
	     "Ah... has been fed up already")))


Chapter 10 -Exercise 2
Using nthcdr and car, construct a series of expressions to return
the first, second, third, and fourth elements of a list.


(defun leto-nth (arg)
  "constructed in _nthcdr_ and _car_ to return the nth element of a list."
  (interactive "*p")
  (message "%s" (car (nthcdr (1- arg) kill-ring))))


      <!-- Page published by Emacs Muse ends here -->
      </div><!-- cont -->
      <div id="side">
	<h3>工具配置笔记</h3>
	<ul>
	  <li><a href="./debian.html">Debian GNU/Linux</a></li>
	  <li><a href="./emacs.html">Emacs Snapshot GTK</a></li>
	  <li><a href="./fvwm.html">FVWM</a></li>
	  <li><a href="./latex.html">LaTeX</a></li>
	  <li><a href="./mplayer.html">Mplayer</a></li>
	</ul>
	<h3>学生习作</h3>
	<ul>
	  <li><a href="./foo.html">文学与人生课程作业</a></li>
	  <li><a href="./bar.html">偶尔码字</a></li>
	</ul>
	<h3>在外网的我的窝</h3>
	<ul>
	  <li><a href="http://hi.baidu.com/irabbit">贫而乐, 富而好礼</a></li>
	  <li><a href="http://xiaonei.com/leto">
	      校内网 - 陈养剑</a></li>
	</ul>
	<h3>友情链接们</h3>
	<ul>
	  <li><a href="http://www.debian.org/">
	      <img src="../images/powered_by_debian.png" 
		   alt="Powered by debian" /></a></li>
	  <li><a href="http://www.gnu.org/software/emacs/">
	      <img src="../images/gnu_emacs_icon_grey.png"
		   alt="Made with emacs" /></a></li>
	  <li><a href="http://xcoder.cn/Muse/index.html">
	      <img src="../images/muse-abailly.png"
		   alt="Make with emacs-muse" /></a></li>
	  <li><a href="http://www.getfirefox.com/">
	      <img src="../images/get_firefox_small.png"
		   alt="Get firefox?" /></a></li>
	  <li><a href="http://easybar.8866.org/~pluskid/">
	      pluskid - 星黎殿</a></li>
	</ul>
      </div><!-- side -->
      <div><br class="clear" /></div><!-- to clear floats -->
    </div><!-- wiki -->  
    <div id="footer">
      <a href="./">
	<img src="../images/gerwinski-gnu-head.png" 
	     alt="Go back to main page" /></a>
      <p> By leto@freecity.cn 2007年09月18日</p>
    </div><!-- footer-->
  </body>
</html>
